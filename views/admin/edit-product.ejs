<%- include('../layout/adminHeadder.ejs') %>

<style>
.image-item {
    display: inline-block;
    margin-right: 10px;
    margin-bottom: 10px;
    vertical-align: top;
}

.preview-image {
    max-width: 150px;
    max-height: 150px;
    display: block;
    margin-bottom: 5px;
}
</style>

<section class="content-main">
    <form id="productForm" method="post" action="/admin/edit-product?proId=<%= productData._id %>" enctype="multipart/form-data">
        <div class="row">
            <div class="col-9">
                <div class="content-header">
                    <h2 class="content-title">Edit Product</h2>
                    <div>
                        <button class="btn btn-md rounded font-sm hover-up" onclick="validateForm(event)" type="submit">Save</button>
                    </div>
                </div>
                <div id="message-container"></div>
            </div>
            <div class="col-lg-6">
                <div class="card mb-4">
                    <div class="card-header">
                        <h4>Basic</h4>
                    </div>
                    <div class="card-body">
                        <div class="mb-4">
                            <label for="product_name" class="form-label">Product title</label>
                            <input type="text" name="name" placeholder="Type here" value="<%= productData.name %>" class="form-control" id="name" required />
                        </div>
                        <div class="mb-4">
                            <label class="form-label">Full description</label>
                            <textarea id="description" name="description" placeholder="Type here" class="form-control" rows="4" required><%= productData.description %></textarea>
                        </div>
                        <div class="row">
                            <div class="col-lg-4">
                                <div class="mb-4">
                                    <label class="form-label">Regular price</label>
                                    <div class="row gx-2">
                                        <input placeholder="₹" id="price" value="<%= productData.price %>" name="price" type="number" class="form-control" required />
                                    </div>
                                </div>
                            </div>
                            <div class="col-lg-4">
                                <div class="mb-4">
                                    <label class="form-label">Promotional price</label>
                                    <input placeholder="₹" id="promoPrice" value="<%= productData.promoPrice %>" name="promoPrice" type="number" class="form-control" />
                                </div>
                            </div>
                            <div class="col-lg-4">
                                <div class="mb-4">
                                    <label class="form-label">Stock</label>
                                    <input placeholder="Stock" id="stock" value="<%= productData.stock %>" name="stock" type="number" class="form-control" required />
                                </div>
                            </div>
                        </div>
                        <div class="mb-4">
                            <label for="product_tags" class="form-label">Tags</label>
                            <input type="text" id="tags" value="<%= productData.tags %>" name="tags" class="form-control" />
                        </div>
                    </div>
                </div>
            </div>
            <% if (messages.error) { %>
                <div class="alert alert-danger"><%= messages.error %></div>
              <% } %>
            <% if (messages.success) { %>
                <div class="alert alert-success"><%= messages.success %></div>
              <% } %>
            <div class="col-lg-3">
                <div class="card mb-4">
                    <div class="card-header">
                        <h4>Media</h4>
                    </div>
                    <div class="card-body">
                        <div id="image-container">
                            <% productData.img.forEach((image, index) => { %>
                                <div class="image-item">
                                    <img src="/productImage/<%= image %>" class="preview-image" />
                                    <button type="button" class="btn btn-danger btn-sm remove-image" data-image="<%= image %>">x</button>
                                </div>
                            <% }) %>
                        </div>
                        <div id="image-inputs"></div>
                    </div>
                </div>
                <div class="card mb-4">
                    <div class="card-header">
                        <h4>Organization</h4>
                    </div>
                    <div class="card-body">
                        <div class="row gx-2">
                            <div class="col-sm-6 mb-3">
                                <label class="form-label">Category</label>
                                <select class="form-select" id="category_id" name="category_id">
                                    <% categories.forEach(category => { %>
                                        <option value="<%= category._id %>" <%= category._id.equals(productData.category_id._id) ? 'selected' : '' %>><%= category.name %></option>
                                    <% }) %>
                                </select>                                
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </form>
</section>

<!-- <div class="col-sm-6 mb-3">
    <label class="form-label">Brand</label>
    <select class="form-select">
        <option>Nissan</option>
        <option>Honda</option>
        <option>Mercedes</option>
        <option>Chevrolet</option>
    </select>
</div> -->

<script>
    document.addEventListener('DOMContentLoaded', function () {
        const croppers = {};
        const removedImages = [];
        const maxImages = 4;
    
        function initializeCropper(input) {
            input.addEventListener('change', function (e) {
                const file = e.target.files[0];
                if (file) {
                    const reader = new FileReader();
                    reader.onload = function (event) {
                        const imageContainer = input.closest('.image-item');
                        let previewImage = imageContainer.querySelector('.preview-image');
                        if (!previewImage) {
                            previewImage = document.createElement('img');
                            previewImage.classList.add('preview-image');
                            imageContainer.insertBefore(previewImage, input);
                        }
                        previewImage.src = event.target.result;
    
                        if (croppers[input.id]) {
                            croppers[input.id].destroy();
                        }
    
                        croppers[input.id] = new Cropper(previewImage, {
                            aspectRatio: 1 / 1,
                            viewMode: 1,
                            crop: function (event) {
                                // You can use event.detail to get cropping information
                            }
                        });
                    };
                    reader.readAsDataURL(file);
                }
            });
        }
    
        function updateImageInputs() {
            const imageContainer = document.getElementById('image-container');
            const imageInputs = document.getElementById('image-inputs');
            const currentImages = imageContainer.querySelectorAll('.image-item').length;
            const remainingInputs = maxImages - currentImages;
    
            imageInputs.innerHTML = '';
    
            for (let i = 0; i < remainingInputs; i++) {
                const inputId = `img${currentImages + i + 1}`;
                const inputHtml = `
                    <div class="image-item">
                        <input accept="image/*" name="img" id="${inputId}" class="form-control" type="file" />
                    </div>
                `;
                imageInputs.insertAdjacentHTML('beforeend', inputHtml);
                initializeCropper(document.getElementById(inputId));
            }
        }
    
        updateImageInputs();
    
        document.getElementById('image-container').addEventListener('click', function (e) {
            if (e.target.classList.contains('remove-image')) {
                const imageToRemove = e.target.getAttribute('data-image');
                removedImages.push(imageToRemove);
                e.target.closest('.image-item').remove();
                updateImageInputs();
            }
        });
    
        function validateForm(event) {
            event.preventDefault();
            const form = document.getElementById('productForm');
            const formData = new FormData(form);
    
            // Validation
            const name = formData.get('name');
            const description = formData.get('description');
            const price = formData.get('price');
            const stock = formData.get('stock');
            const category = formData.get('category_id');
    
            if (name.trim().length < 3) {
                showMessage('Name should be at least 3 characters long.', 'error');
                return;
            }
    
            if (description.trim().length < 4) {
                showMessage('Description should be at least 4 characters long.', 'error');
                return;
            }
    
            if (isNaN(price) || Number(price) <= 0) {
                showMessage('Price should be a positive number.', 'error');
                return;
            }
    
            if (isNaN(stock) || Number(stock) < 0) {
                showMessage('Stock should be a non-negative number.', 'error');
                return;
            }
    
            if (!category) {
                showMessage('Please select a category.', 'error');
                return;
            }
    
            // Add removed images to formData
            removedImages.forEach(img => formData.append('removedImages', img));
    
            // Clear existing 'img' fields from formData
            formData.delete('img');
    
            // Process all images (existing and new)
            const allImageItems = document.querySelectorAll('.image-item');
            let newImageCount = 0;
            let totalImageCount = 0;
    
            Promise.all(Array.from(allImageItems).map((item, index) => {
                const input = item.querySelector('input[type="file"]');
                const img = item.querySelector('img');
    
                if (input && input.files.length > 0 && croppers[input.id]) {
                    return new Promise((resolve) => {
                        croppers[input.id].getCroppedCanvas().toBlob(blob => {
                            formData.append('img', blob, `new_img_${++newImageCount}.jpeg`);
                            totalImageCount++;
                            resolve();
                        }, 'image/jpeg');
                    });
                } else if (img && !input) {
                    // This is an existing image that hasn't been changed
                    formData.append('existingImages', img.src.split('/').pop());
                    totalImageCount++;
                }
            })).then(() => {
                // Check if there are at least 2 images
                if (totalImageCount < 2) {
                    showMessage('Please provide at least 2 images for the product.', 'error');
                    return;
                }
    
                // Form submission
                fetch(form.action, {
                    method: 'POST',
                    body: formData
                })
                .then(response => response.json())
                .then(data => {
                    if (data.message) {
                        if (data.save) {
                            Swal.fire({
                                title: 'Success!',
                                text: data.message,
                                icon: 'success',
                                timer: 3000,
                                showConfirmButton: true,
                                confirmButtonColor: '#28a745'
                            }).then((result) => {
                                window.location.href = '/admin/products';
                            });
                        } else {
                            showMessage(data.message, 'error');
                        }
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    showMessage('An error occurred while updating the product', 'error');
                });
            });
        }
    
        function showMessage(message, type) {
            const messageContainer = document.getElementById('message-container');
            const alertClass = type === 'success' ? 'alert-success' : 'alert-danger';
            messageContainer.innerHTML = `<div class="alert ${alertClass}">${message}</div>`;
        }
    
        // Form submission event listener
        document.getElementById('productForm').addEventListener('submit', validateForm);
    });
    </script>
    

<!-- footer -->
<%- include('../layout/adminFooter.ejs') %>